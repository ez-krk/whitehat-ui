import { PROGRAM_ID } from '@/constants'
import { IDL } from '@/idl'
import { Address, BN, Program } from '@coral-xyz/anchor'
import { ConnectionContextState } from '@solana/wallet-adapter-react'
import { PublicKey, Transaction } from '@solana/web3.js'

export const registerProtocol = async (
  owner: PublicKey,
  id: number,
  seed: number,
  connection: ConnectionContextState
): Promise<Transaction> => {
  const program = new Program(IDL, PROGRAM_ID as Address, connection)

  const protocol = PublicKey.findProgramAddressSync(
    [Buffer.from('protocol'), owner.toBuffer()],
    program.programId
  )[0]

  const vulnerability = PublicKey.findProgramAddressSync(
    // b"vulnerability", protocol.key().as_ref(), id.to_le_bytes().as_ref(), seed.to_le_bytes().as_ref()
    [
      Buffer.from('vulnerability'),
      protocol.toBytes(),
      new BN(id).toArrayLike(Buffer, 'le', 8),
      new BN(seed).toArrayLike(Buffer, 'le', 8),
    ],
    program.programId
  )[0]

  const analytics = PublicKey.findProgramAddressSync(
    [Buffer.from('analytics')],
    program.programId
  )[0]

  return await program.methods
    .approveVulnerability()
    .accounts({
      owner,
      protocol,
      vulnerability,
      analytics,
    })
    .transaction()
}
